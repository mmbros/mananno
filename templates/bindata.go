// Code generated by go-bindata.
// sources:
// templates/tmpl/arenavision/schedule.tmpl
// templates/tmpl/partials/_footer.tmpl
// templates/tmpl/partials/_header.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _arenavisionScheduleTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x55\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\xa0\x02\x3d\x64\x61\x29\x09\xba\x28\x9a\x32\x2a\x82\x74\x73\x28\x8c\xa2\xa8\xb3\x05\x7a\x64\xa4\x49\x44\x2c\x4d\xba\x14\xed\x6d\xca\xf0\xbf\x17\x43\x7d\xd1\xb6\x82\x3d\x25\x1a\xce\x7b\x1c\xbe\x79\x33\xf6\xbe\xc1\x67\xa9\x11\xf2\xae\x6e\xb1\xd9\x2b\xcc\x43\xf0\xde\xe1\x76\xa7\x84\x43\xc8\x5b\x14\x0d\xda\x1c\x8a\x10\x18\x6f\xaf\xaa\x3b\x8b\x5a\xfc\x25\x3b\x69\x34\x6c\x06\x08\x2f\xdb\xab\x8a\x71\x01\xad\xc5\xe7\xdb\x99\xa9\x7a\xdc\x3b\x27\xe1\x45\x49\xc0\x03\x6a\x27\x79\x29\x2a\xf6\x06\x67\x99\xbf\x74\x3b\x63\xdd\x6d\x67\xea\x1a\x6d\x5e\xdd\x0b\x55\x4b\xf3\x6e\x72\x6d\xb6\x3b\x74\xd2\x49\xa3\x6f\xa5\x13\x4a\x8a\x0f\x1d\x5a\x89\x1f\x44\x5e\x6d\xe8\x1f\xb8\x8b\x58\xc6\x5b\x5b\x31\xbe\xab\xd6\xa2\x73\xf0\x79\xd7\x08\x87\x37\xc0\x9f\x2a\xef\xa1\xa0\x58\x1f\x2a\x1e\x8c\xdd\x0a\x07\xf9\xe5\x35\xfc\x26\xf4\x5e\xd8\x57\xb8\xfa\x78\x73\xf9\xc3\xcd\xe5\xc7\x1c\x42\xe0\xe5\x53\xc5\xcb\x5d\xc5\xb8\x13\x4f\x0a\xa1\x56\xa2\xeb\xd2\x57\x32\xee\x48\x25\xfa\x6b\xe3\x47\xf5\xab\x70\x82\x97\xae\xed\xbf\x36\xf4\xb8\xf9\xf3\xbe\x2f\xff\x3f\x69\x34\xce\xd1\x4f\x24\x90\x49\xb2\x84\x16\x4a\x0e\xdf\x65\x24\x2e\xa7\x6b\x9e\x4c\xf3\x5a\x31\xef\xc1\x0a\xfd\x82\x50\x44\x70\x07\xab\x10\x58\x96\x79\xbf\x82\xb9\x7f\x63\x99\xab\xd8\x81\x1c\x8a\x98\xe5\x3d\xa0\x6e\x80\x7a\x5a\x0e\x6c\xbc\x8c\xcf\x23\xda\x19\xfd\x6c\x8c\x43\x9b\x47\x04\xea\x26\x04\xc6\xd8\xb9\x65\x06\xee\x10\x06\x01\x9a\x49\x23\x27\xac\xcb\x2b\x96\xf1\x46\x1e\x8e\x82\x2b\x52\x3e\xa7\x4e\x7c\x45\xfc\xd2\x88\x57\x28\x36\x14\x7f\x94\x5b\x84\x10\x80\x5a\x34\x05\x92\x0e\xf5\x0d\x69\xe4\x61\x91\xd4\xc9\x6d\x4f\xba\x80\x8d\x2d\x4d\xe0\xbc\x74\x51\xcb\xa6\x9a\x1c\x36\xd8\xd0\xfb\xbd\x55\xff\xec\xd1\x52\x51\x14\x81\x37\x78\x34\x6b\xf3\x15\x6d\x08\x03\x7d\x0c\x87\xc0\x45\x59\x2d\x11\xa5\x16\x4d\xe9\xee\xe7\xf8\x39\x69\x7a\x78\x4a\x4d\xe7\xb1\xcb\xf1\x01\x63\x94\x65\xb3\x07\xd6\xf2\x80\xa3\x05\xb8\x18\x75\x51\xf2\x80\xf9\x50\x55\xbc\xa3\x15\x5a\xa3\x2a\x3e\xff\xb9\x06\xba\x97\x65\xd9\x91\x8e\x94\xbf\xaa\xfb\xa4\xa1\xaa\xfe\x03\x12\xe1\x17\x20\x4a\xe8\x97\x7c\x18\x2c\xfd\x72\x94\x1c\x67\x31\x1b\x1c\xb7\xea\x2d\xd7\x8c\xa6\x9e\x6c\xe5\x7d\x79\xc1\xa4\xde\xed\xdd\x0d\xcb\xc6\x3b\x05\x2d\x9b\x43\x5c\x36\x63\x1d\x2c\xdb\x38\x8b\x62\x0b\x93\xc7\xe9\x2d\x2c\xeb\xc5\x01\xb8\x48\x31\x31\xc8\x32\x92\x06\x4e\xcf\x28\xc8\xb2\x4f\xd6\xd2\x09\xa0\xb5\xc6\xb2\x8b\x32\x3a\x7d\xf4\xf7\xa8\x03\x69\xea\x3d\x2c\x2c\x45\x9a\xa0\x8c\xd7\xa8\x1d\x5a\x72\x64\x7b\x9d\x6a\x56\x3c\xec\x95\xfa\x5d\x44\x47\xf3\x6e\x2b\x94\x9a\x2d\x92\xa6\x6d\xcc\xde\xd6\x38\xb6\xe4\xfb\xef\xfe\xbd\xfe\xf1\xa7\x87\x9f\x49\x37\x5e\x0e\xb0\xb2\xbd\x8e\x03\x2f\x9f\xa1\xa0\x9a\xe3\xbd\x49\x13\xd0\x5a\x92\x9f\xce\x26\xe9\xe7\x21\x67\x47\xa9\x24\xca\x6a\x5e\x5f\x0b\x7b\x7b\x5e\xec\x54\xc2\x48\x16\xef\x8e\x32\x47\x97\xf1\x0e\xeb\xe8\xd5\x94\x37\x3a\xea\xfc\x36\x2d\xc6\xc1\x8c\x04\x89\x95\x47\x93\x9c\x41\x92\x11\x4a\x91\x27\x43\xf2\x3e\x3e\xce\x72\x8a\x9c\x66\xf6\x7d\xcc\xb4\x94\x46\xc8\xc2\x06\xa2\xdf\x08\x38\x5d\x26\x4b\x64\xc9\x48\xc8\x03\xf6\x73\x91\x2c\xaf\x72\x90\x2f\xed\xd3\xc9\x4a\x23\x9f\xaf\x76\x4a\xbc\xe6\xc7\xbe\x19\x26\x80\xcc\xf2\xc7\xfa\xee\xef\xa4\x4b\x4b\x04\x4a\xea\x2f\xe3\x52\x1c\x70\x73\x11\x93\x75\xbf\xb1\xf5\xff\x0f\x00\x00\xff\xff\xeb\x7d\x30\x3d\x28\x08\x00\x00")

func arenavisionScheduleTmplBytes() ([]byte, error) {
	return bindataRead(
		_arenavisionScheduleTmpl,
		"arenavision/schedule.tmpl",
	)
}

func arenavisionScheduleTmpl() (*asset, error) {
	bytes, err := arenavisionScheduleTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arenavision/schedule.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partials_footerTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\xb2\x81\x30\xed\x6c\x92\xec\x72\x73\x6d\xf4\x93\xec\x92\x8a\xf2\x8b\x15\xd4\x92\xf3\x0b\x2a\xad\x15\x8c\x0c\x0c\xcd\x6c\xf4\xa1\x2a\xb8\x6c\xf4\x93\xf2\x53\x2a\x41\x74\x46\x49\x6e\x8e\x1d\x57\x75\x75\x6a\x5e\x4a\x6d\x2d\x17\x20\x00\x00\xff\xff\xc3\xe7\xc4\x59\x57\x00\x00\x00")

func partials_footerTmplBytes() ([]byte, error) {
	return bindataRead(
		_partials_footerTmpl,
		"partials/_footer.tmpl",
	)
}

func partials_footerTmpl() (*asset, error) {
	bytes, err := partials_footerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/_footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partials_headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\xdd\x8e\xea\x38\x0c\xbe\xa6\x4f\xe1\xed\x11\xd2\x99\x23\x0a\xed\xb0\x68\x8e\x5a\xe0\x7a\x6e\xf6\x6e\x5f\xc0\x24\xa6\x8d\x08\x49\x95\x98\xbf\xed\xf6\xdd\x8f\xd2\x96\xe1\x67\x34\x23\x2e\xa8\x13\x7f\x9f\xed\xcf\x8e\x9b\x46\xd2\x56\x19\x82\xb8\x22\x94\xe4\xe2\xb6\x5d\xfe\x25\xad\xe0\x4b\x4d\x50\xf1\x5e\xaf\xa3\x65\xf8\x03\x8d\xa6\x5c\xc5\x8a\xe3\x70\x40\x28\xd7\xd1\x72\x4f\x8c\x20\x2a\x74\x9e\x78\x15\x1f\x78\x9b\xfc\x0e\xb7\xac\x58\xd3\xba\x69\xd4\x16\xa6\xef\x84\xf2\xdf\x60\xb7\x6d\xd3\xdc\x99\xd0\xb6\xf0\x3f\xfc\x83\x06\x8d\xb1\x4d\x43\xda\x53\xdb\xde\x4c\x23\xdb\x76\x39\xeb\x89\x86\x38\x06\xf7\xb4\x8a\x8f\x8a\x4e\xb5\x75\x1c\x83\xb0\x86\xc9\xf0\x2a\x3e\x29\xc9\xd5\x4a\xd2\x51\x09\x4a\x3a\x63\x02\xca\x28\x56\xa8\x13\x2f\x50\xd3\x2a\x8b\xd7\x51\xb4\xf4\x7c\x09\x6c\x1b\x2b\x2f\xd0\x44\xa3\xad\x35\x9c\xc3\x6b\x5a\x9f\xe1\x9d\xf4\x91\x58\x09\x9c\x80\x47\xe3\x13\x4f\x4e\x6d\x8b\x68\x24\xac\xb6\x2e\x87\x1f\xf3\xf9\xbc\x88\x46\x7b\x3c\xf7\xf4\x39\x64\xaf\xbf\xd3\xfa\xdc\x9d\xb9\x52\x99\x1c\x52\xc0\x03\xdb\x22\x1a\xd5\x28\xa5\x32\x65\x0e\x59\xe7\xd0\x46\x55\x76\x0d\x96\x78\xf5\x1f\xe5\xb0\x18\x2e\x30\x9c\x0f\x11\x36\xfa\x40\x45\x34\x62\x3a\x73\x22\x49\x58\x87\xac\xac\xc9\xc1\x58\x43\x9d\x6f\x5e\xd9\x23\xb9\x80\xd8\xa0\xd8\x95\xce\x1e\x8c\x4c\x06\xb0\x23\x79\xcb\xf5\x54\x29\xfe\x96\x6a\xea\x45\x45\xf2\xa0\xa9\x23\xb3\x4e\x92\x0b\x44\x1a\x6b\x4f\x39\x5c\xbf\x8a\x68\x74\x2d\x35\x4d\xc7\x8f\xb8\xa0\xef\x9d\x25\x6f\x44\x39\x64\xf5\x19\xbc\xd5\x4a\xc2\x0f\x29\xe5\xbd\x1e\x8b\xfa\xfc\xa1\xc9\x1d\xba\xeb\x06\xbb\x6f\xeb\x2b\x37\xf8\x33\x9d\x74\xbf\x69\xfa\xf6\x12\x18\xa2\xa9\x67\x74\xfc\x24\xed\xdb\x62\xdc\x5f\x6a\x75\xa4\x47\xb2\x1c\xb4\x32\x84\x2e\x29\x1d\x4a\x45\x86\x7f\x66\xf3\x85\xa4\x72\xf2\x48\x9f\xbd\xbd\x40\x3a\x9e\x3c\x87\xec\x54\x78\x29\x3e\x04\x0b\x1c\x07\x9f\xc3\xdf\xa1\x9e\xd9\xaf\x5b\x1b\x51\xec\x0a\xf8\x35\x8b\x46\x52\xf9\x5a\xe3\x25\x07\x65\x42\xe0\x64\xa3\xad\xd8\xdd\xeb\x91\x06\x45\xae\x8d\x42\xad\x4a\x93\x83\x20\xc3\xe4\x3a\x85\x42\x05\x89\xa8\xd0\x18\xd2\x4f\x55\x2a\x53\x91\x53\x5c\x0c\x87\x27\x52\x65\xc5\x39\x6c\xac\x96\x37\x68\x78\xad\xd0\xdc\xe5\x56\x3a\xbc\xf4\xa9\x3d\xcc\xe2\xf8\x03\x32\xb4\xe0\x0b\x78\x3f\x57\x01\xdf\x8b\xef\x08\xf7\x49\xa8\xf0\xd3\x74\x07\xca\x2f\x32\x1b\x60\x5a\x99\xdd\x27\x58\x9f\x08\x1d\xc9\x70\x12\x9e\xfa\x93\xc3\xeb\x77\xbc\x3d\x4a\xd8\x7d\x4d\xac\xc2\xb8\x3f\x81\xb3\x47\x7a\x1f\x16\xc8\xb3\xcb\x30\xe6\xcb\xd9\xb0\x26\x96\xb3\x61\xc9\x85\x09\x5d\x47\xc3\x4e\x8a\xfe\x04\x00\x00\xff\xff\x54\x75\xdf\x77\x2f\x05\x00\x00")

func partials_headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_partials_headerTmpl,
		"partials/_header.tmpl",
	)
}

func partials_headerTmpl() (*asset, error) {
	bytes, err := partials_headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/_header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"arenavision/schedule.tmpl": arenavisionScheduleTmpl,
	"partials/_footer.tmpl": partials_footerTmpl,
	"partials/_header.tmpl": partials_headerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"arenavision": &bintree{nil, map[string]*bintree{
		"schedule.tmpl": &bintree{arenavisionScheduleTmpl, map[string]*bintree{}},
	}},
	"partials": &bintree{nil, map[string]*bintree{
		"_footer.tmpl": &bintree{partials_footerTmpl, map[string]*bintree{}},
		"_header.tmpl": &bintree{partials_headerTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

